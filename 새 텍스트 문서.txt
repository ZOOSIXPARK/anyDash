import com.sun.net.httpserver.Headers;
import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;

import java.io.*;
import java.net.InetSocketAddress;
import java.net.URLDecoder;
import java.nio.file.Files;
import java.nio.file.Paths;

public class UniversalFileServer {

    // 고정된 파일 저장 경로 (보안 목적 상 루트 제한)
    private static final String BASE_DIR = "/app/logs/biz";

    public static void main(String[] args) throws IOException {
        int port = 3000;
        HttpServer server = HttpServer.create(new InetSocketAddress(port), 0);
        System.out.println("✅ Server running at http://localhost:" + port);

        server.createContext("/download", new FileDownloadHandler());
        server.setExecutor(null); // 기본 executor 사용
        server.start();
    }

    static class FileDownloadHandler implements HttpHandler {

        @Override
        public void handle(HttpExchange exchange) throws IOException {
            if (!"GET".equalsIgnoreCase(exchange.getRequestMethod())) {
                exchange.sendResponseHeaders(405, -1);
                return;
            }

            String query = exchange.getRequestURI().getQuery();
            if (query == null || !query.startsWith("file=")) {
                exchange.sendResponseHeaders(400, -1); // Bad Request
                return;
            }

            String fileName = URLDecoder.decode(query.substring(5), "UTF-8");

            // 파일 경로 구성 (디렉토리 탈출 방지)
            File file = new File(BASE_DIR, fileName).getCanonicalFile();
            if (!file.getPath().startsWith(new File(BASE_DIR).getCanonicalPath())) {
                exchange.sendResponseHeaders(403, -1); // Forbidden
                return;
            }

            if (!file.exists() || !file.isFile()) {
                exchange.sendResponseHeaders(404, -1); // Not Found
                return;
            }

            Headers headers = exchange.getResponseHeaders();

            // MIME 타입 자동 감지
            String mimeType = Files.probeContentType(Paths.get(file.getAbsolutePath()));
            if (mimeType == null) {
                mimeType = "application/octet-stream";
            }

            headers.add("Content-Type", mimeType);
            headers.add("Access-Control-Allow-Origin", "*");
            headers.add("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"");

            byte[] response = readFileToBytes(file);
            exchange.sendResponseHeaders(200, response.length);

            try (OutputStream os = exchange.getResponseBody()) {
                os.write(response);
            }
        }

        private byte[] readFileToBytes(File file) throws IOException {
            try (InputStream is = new FileInputStream(file);
                 ByteArrayOutputStream buffer = new ByteArrayOutputStream()) {

                byte[] data = new byte[4096];
                int nRead;
                while ((nRead = is.read(data, 0, data.length)) != -1) {
                    buffer.write(data, 0, nRead);
                }
                return buffer.toByteArray();
            }
        }
    }
}
